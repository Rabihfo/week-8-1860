CHIP DisplayCounter201849171 {
    IN inc, reset;
    OUT a, b, c, d, e, f, g;

    PARTS:
    // Constants
    False(out=false);
    Not(in=false, out=true);

    // Define 16-bit false constant (all 0s) using 16 False gates
    // Since we can't use sub-buses, we simulate a 16-bit bus manually
    And(a=false, b=false, out=falseBit0);
    And(a=false, b=false, out=falseBit1);
    And(a=false, b=false, out=falseBit2);
    And(a=false, b=false, out=falseBit3);
    And(a=false, b=false, out=falseBit4);
    And(a=false, b=false, out=falseBit5);
    And(a=false, b=false, out=falseBit6);
    And(a=false, b=false, out=falseBit7);
    And(a=false, b=false, out=falseBit8);
    And(a=false, b=false, out=falseBit9);
    And(a=false, b=false, out=falseBit10);
    And(a=false, b=false, out=falseBit11);
    And(a=false, b=false, out=falseBit12);
    And(a=false, b=false, out=falseBit13);
    And(a=false, b=false, out=falseBit14);
    And(a=false, b=false, out=falseBit15);

    // Combine to form 16-bit false bus
    Mux16(a=false, b=false, sel=false, out[0]=falseBit0);
    Mux16(a=false, b=false, sel=false, out[1]=falseBit1);
    Mux16(a=false, b=false, sel=false, out[2]=falseBit2);
    Mux16(a=false, b=false, sel=false, out[3]=falseBit3);
    Mux16(a=false, b=false, sel=false, out[4]=falseBit4);
    Mux16(a=false, b=false, sel=false, out[5]=falseBit5);
    Mux16(a=false, b=false, sel=false, out[6]=falseBit6);
    Mux16(a=false, b=false, sel=false, out[7]=falseBit7);
    Mux16(a=false, b=false, sel=false, out[8]=falseBit8);
    Mux16(a=false, b=false, sel=false, out[9]=falseBit9);
    Mux16(a=false, b=false, sel=false, out[10]=falseBit10);
    Mux16(a=false, b=false, sel=false, out[11]=falseBit11);
    Mux16(a=false, b=false, sel=false, out[12]=falseBit12);
    Mux16(a=false, b=false, sel=false, out[13]=falseBit13);
    Mux16(a=false, b=false, sel=false, out[14]=falseBit14);
    Mux16(a=false, b=false, sel=false, out[15]=falseBit15);

    // Counter logic
    Inc16(in=counterOut, out=incOut);
    Mux16(a=incOut, b=false, sel=reset, out=incrOut);
    Or(a=inc, b=reset, out=load);
    Register(in=incrOut, load=load, out=counterOut);

    // Extract bits 0‚Äì3 for decoder input
    And(a=counterOut[0], b=true, out=D);
    And(a=counterOut[1], b=true, out=C);
    And(a=counterOut[2], b=true, out=B);
    And(a=counterOut[3], b=true, out=A);

    // Connect to your 7-segment decoder
    Decoder201849171(A=A, B=B, C=C, D=D,
                     a=a, b=b, c=c, d=d, e=e, f=f, g=g);
}
